AC_DEFUN([AC_INCLUDE_BOMEMORY_H],
[
 AC_ARG_ENABLE(
  bomemory,
  [  --enable-bomemory       enable memory logging (debugging)],
  bo_use_bomemory=$enableval,
  bo_use_bomemory=no
 )

 AC_LANG_SAVE
 AC_LANG_CPLUSPLUS
 bo_save_ldflags="$LDFLAGS"
 bo_save_cxxflags="$CXXFLAGS"

 AC_MSG_CHECKING(whether c++ compiler supports -include)

dnl AC_MSG_CHECKING(for libGL)
# LDFLAGS="$LDFLAGS $LIB_XEXT -lm $LIBSOCKET"
 bo_include_file="-include bomemory/bomemory.h"
 bo_include_path="$srcdir"
dnl AB: disabled, as the STL does not like macros redefining new
dnl CXXFLAGS="$CXXFLAGS -I$bo_include_path $bo_include_file"
 AC_TRY_COMPILE([
	],
	[],
	bo_can_include="yes",
	bo_can_include="no"
 )

 if test "x$bo_can_include" != "xyes"; then
	AC_MSG_RESULT([no])
	AC_MSG_WARN([Your compiler doesn't support -include, won't include memory/bomemory.h!])
 else
	AC_MSG_RESULT([yes])
	if test "x$bo_use_bomemory" = "xyes"; then
		dnl AB: disabled, as the STL does not like macros redefining new
dnl		KDE_CXXFLAGS="$KDE_CXXFLAGS $bo_include_file"
		AC_SUBST(KDE_CXXFLAGS)
		AC_DEFINE([BOSON_USE_BOMEMORY], 1, [Defines whether bomemory library should be used (debugging)])
		LIB_BOMEMORY="\$(top_builddir)/bomemory/libbomemory.la"
		AC_SUBST(LIB_BOMEMORY)
	fi
 fi

 CXXFLAGS="$bo_save_cxxflags"
 LDFLAGS="$bo_save_ldflags"
 AC_LANG_RESTORE
 AM_CONDITIONAL(include_bomemory, test -n "$LIB_BOMEMORY")
])
AC_INCLUDE_BOMEMORY_H

