/** \page config_custom custom configuring 

\ref proposal_state

What means custom configuring: \n 
developers would like to be able to define "configure needs" in subdirs of a svn module,
i.e. to have a file under kdecore that says "I need the headers sys/stat.h, sys/mntent.h, 
sys/param.h, paths.h, limits.h, execinfo.h" etc. and I need the c functions "mmap, getmntinfo, 
setmntent", etc. 

Custom configuration means that developers can customize the configure process on a 
directory or package related way. 
This is done by adding specific files named 'SConfigure' into the required directory (like autotool's 
directory based configure.in.in). \n
On the configuring process the settings in this files are collected and stored in the 
\ref config_cache configuration cache. Then the configuration process performs the requested 
actions, that means searching for headers, c function and additional libraries. The results are 
stored into the configuration cache too. 
	
\section sconfigure_format Format of 'SConfigure' files

SConfigure files are regular python scripts which are executed by the configure process with a 
previously created PackageConfigure object named 'conf'. The PackageConfigure class provides several attributes, 
which allows to customize the configuration. 

[question: or better named 'env' or 'config' ? ] 
<ul>

<li>
specifiy used config header file
example: 

\code
conf.setConfigHeader("dcop/config-dcop.h")
\endcode


<li>
specify required c header file(s) \n
example:

\code
conf.checkHeaders('sys/time.h unistd.h')
conf.checkHeaders(['sys/time.h', 'unistd.h'])
\endcode

If the header file wasn't found, the configuration process will be canceled with an error message.

the given filenames are automatically mapped to a related define in the config header config-<dirname>.h 
which is included by the global config.h file. \n 
If for example the header sys/stat.h is present it will be mapped to HAVE_SYS_STAT_H \n

<li>
specify optional c header file(s) \n
example:

\code
conf.checkOptionalHeaders('sys/time.h unistd.h')
conf.checkOptionalHeaders(['sys/time.h', 'unistd.h'])
\endcode

If the header file wasn't found while configuration, a warning is printed and the configuration process goes on.

The given filenames are automatically mapped to a related define in the related config header which is included 
by the global config.h file. \n 
If for example the header sys/stat.h is present it will be mapped to HAVE_SYS_STAT_H \n

<li>
specify required c function(s) 
example: 

\code
conf.checkFunctions('setenv gethostname')
conf.checkFunctions(['setenv','gethostname'])
\endcode

If the function wasn't found in the configuration process, the configuration process will be canceled with an error message.

The available functions are mapped automatically to a related define in the related config header which is included 
by the global config.h file. \n
if for example the function strlcpy() is present it will be mapped to HAVE_STRLCPY \n

<li>
specify optional c function(s) 
example: 

\code
conf.checkOptionalFunctions('setenv gethostname')
conf.checkOptionalFunctions(['setenv','gethostname'])
\endcode

If the function wasn't found while configuration, a warning is printed and the configuration process goes on.

The available functions are mapped automatically to a related define in the related config header which is included 
by the global config.h file. \n
if for example the function strlcpy() is present it will be mapped to HAVE_STRLCPY \n

<li>
add a user selectable option for an optional package, setting the package name, a description, 
the default case and special options for further processing like error message ... 
example: 

check build in module, see \ref library_modules for details: 

\code
conf.checkModule(<key>):
conf.checkModule('openssl'):
conf.checkModule('OPENSSL'):
\endcode
\todo: why using uppercase names ? 


custom defined module definition 
		
\code
conf.checkModule(<key>,<description>,<default value>,<messages>):
conf.checkModule('dpms','disable DPMS power saving',no):
conf.checkModule(key='dpms', description='disable DPMS power saving',default='no',
                 message = ['notfound','found'], checkHandler=mycheckHandler,)
\endcode
\todo: complete ... 
- key: module key, under which the required lib definition could be retrieved in the SConscripts file using 
- description: module description, used for message while configuring and help display 
- default: no/yes - default value
- message: optional found/not found message, which will be printed on the end of the configure process. \n
           format: message="notfound" or message = ['notfound','found']
- checkHandler: function, which do the custom checking \todo: specifiy parameter list 
			
The related package could be referenced later in the SConscript file using: 

\code
if env.conf['tiff']: 
	obj.source += "xxx"
	obj.includes += env.conf['tiff'].includes
\endcode

<li>platform support for configuring is performed by checking the currently used platform. For this 
the conf object includes several attributes ?? 
- platform 
- CC 
\todo: finish
	
\code
if conf['WINDOWS']: 
	conf.CheckModule('jasper','Enable jasper (jpeg2k) support','yes')
\endcode


</ul>

\section Implementation hints 

- put in here requirements/options for the implementation 


\section custom_config_notes notes
- later on we could then even automate the creation of that file by a script
that scans the source files for those headers and functions, but not at compile
time imho, just as an easy way to keep those files in sync

- But we can include in the recursive lookup a way to look for _<PLATFORM> files 
additionally, so we can have both.

- we might want per-subdir .h files (e.g. config-kdecore.h and config-kdeui.h), so that
it's easier to move a subdir to another module... but then we have to run the same tests 
more than once if both kdecore and kdeui need sys/stat.h. Although, with the caching
it would be fast, just a bit strange on stdout.

*/


