dnl Check for an existing KGame installation. If existent kgame/kgame.h should
dnl be present
AC_DEFUN(AC_CHECK_KGAME,
[
AC_MSG_CHECKING([for kgame/kgame.h])
AC_FIND_FILE(kgame/kgame.h, $kde_includes, kgame)
if test "$kgame" = NO ; then
  AC_MSG_RESULT([no])
  AC_MSG_ERROR([kgame/kgame.h was not found. Please install kdegames/libkdegames first])
else
  AC_MSG_RESULT([$kgame])
fi
])
AC_CHECK_KGAME

dnl Temporary check: KDE Beta 1 doesn't have KShortcut
dnl AC_DEFUN(AC_CHECK_KSHORTCUT,
dnl [
dnl AC_FIND_FILE(kshortcut.h, $kde_includes, kshortcut)
dnl if test "$kshortcut" = NO || test -z "$kshortcut" ; then
dnl   AC_DEFINE_UNQUOTED(HAVE_KSHORTCUT, 0, [ ])
dnl else 
dnl   AC_DEFINE_UNQUOTED(HAVE_KSHORTCUT, 1, [ ])
dnl fi
dnl ])
dnl AC_CHECK_KSHORTCUT


dnl Temporary check: KDE Beta 1 doesn't have KGameProgress but KProgress
dnl AC_DEFUN(AC_CHECK_KGAMEPROGRESS,
dnl [
dnl AC_FIND_FILE(kgameprogress.h, $kde_includes, kgameprogress)
dnl if test "$kgameprogress" = NO ; then
dnl   AC_DEFINE_UNQUOTED(HAVE_KGAMEPROGRSS, 0, [ ])
dnl else 
dnl   AC_DEFINE_UNQUOTED(HAVE_KGAMEPROGRESS, 1, [ ])
dnl fi
dnl ])
dnl AC_CHECK_KGAMEPROGRESS

KDE_CHECK_STL

dnl TODO: we need to find out which version is installed and which we need
AC_DEFUN(AC_CHECK_LIB3DS,
[
AC_MSG_CHECKING([for lib3ds/file.h])
AC_FIND_FILE(lib3ds/file.h,  [$kde_incdirs], lib3ds)
if test "$lib3ds" = NO ; then
  AC_MSG_RESULT([no])
  AC_MSG_ERROR([lib3ds was not found. See http://lib3ds.sourceforge.net])
else
  AC_MSG_RESULT([$lib3ds])
fi
])
AC_CHECK_LIB3DS

AC_DEFUN(AC_BOSON_HAVE_GL,
[
AC_HAVE_GL
if test "$ac_cv_have_gl" = "no"; then
  AC_MSG_ERROR([Cannot find OpenGL on your system!])
fi
])
AC_BOSON_HAVE_GL


dnl AB: mostly from kdemultimedia/mpeglib/configure.in.in
AC_DEFUN(AC_BOSON_HAVE_OGG,
[
VORBISLIBS=""
AC_MSG_CHECKING(for ogg/vorbis headers)
ogg_vorbis=no
AC_TRY_COMPILE([
		#include <vorbis/codec.h>
		#include <vorbis/vorbisfile.h>
                ],[
                ],[
                ogg_vorbis=yes
                ])
AC_MSG_RESULT($ogg_vorbis)
if test x$ogg_vorbis = xyes; then
   dnl we need the ogg_vorbis_lib because otherwise we override LIBS !
   AC_CHECK_LIB(vorbisfile,ov_open,ogg_vorbis_lib=yes,
                ogg_vorbis=no,[-lvorbisfile -lvorbis -logg])
fi

dnl Ok, libogg is there. now check whether we have mpeglib with .ogg support
dnl AB: if OGGPlayObject.mcopclass oor libarts_mpeglib.la gets ever renamed we
dnl     will have some trouble. We also don't support any other ogg
dnl     implementation for arts (mpeglib is currently the only one anyway)
if test x$ogg_vorbis = xyes; then
   AC_FIND_FILE(mcop/OGGPlayObject.mcopclass, [$kde_libdirs], oggplayobject)
   if test "$oggplayobject" = NO ; then
     AC_MSG_WARN(Your mpeglib installation lacks ogg support. Please
     install kdemultimedia/mpeglib with ogg support in order to hear sounds.)
     ogg_vorbis=no
   fi
fi

if test x$ogg_vorbis = xyes; then
  AC_LANG_SAVE
  AC_LANG_CPLUSPLUS
  bo_save_flags="$CXXFLAGS"
  CXXFLAGS="$CXXFLAGS $all_includes -DOGG_VORBIS=1"
  mpeglib_ogg=no
  AC_MSG_CHECKING(for ogg support in mpeglib)
  AC_TRY_COMPILE([
	#include <mpeglib/oggvorbis/oggFrame.h>
  ],[
	OGGFrame frame();
	return 0;
  ],mpeglib_ogg=yes,mpeglib_ogg=no)
  if test x$mpeglib_ogg = xno ; then
    AC_MSG_WARN(Your mpeglib installation seems not to support ogg files. Please install kdemultimedia/mpeglib with ogg support)
    ogg_vorbis=no
  fi
  AC_MSG_RESULT($mpeglib_ogg)
  CXXFLAGS=$bo_save_flags
  AC_LANG_RESTORE
fi

if test x$ogg_vorbis = xyes; then
   AC_DEFINE(OGG_VORBIS,1,[Define if you have ogg/vorbis installed and mpeglib supports ogg files])
fi
])
AC_BOSON_HAVE_OGG


