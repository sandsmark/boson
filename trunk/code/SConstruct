#! /usr/bin/env python



"""
help       -> scons -h
compile    -> scons
clean      -> scons -c
install    -> scons install
uninstall  -> scons -c install
configure  -> scons configure debug=full extraincludes=/usr/local/include:/tmp/include prefix=/usr/local

Run from a subdirectory -> scons -u (or export SCONSFLAGS="-u" in your ~/.bashrc)

Documentation is in bksys/design
"""

# QUICKSTART (or look in bksys/design)
# cd kdelibs
# tar xjvf bksys/scons-mini.tar.bz2
# ./scons

# WARNING
# Nothing will work out of the box until the config.h system is ready...

# Suggested plan ? (ita)
# * convert some kde4 code as a base for further developments : ok
# * find the variables for the configuration modules          : ok
# * create the config.h system                                : ok
# * write the configuration modules                           : ~
# * fix the installation process and the kobject builder      :
# * use an automatic converter for the rest of the tree       :

###################################################################
# LOAD THE ENVIRONMENT AND SET UP THE TOOLS
###################################################################

## We assume that 'bksys' is our admin directory
import sys, os
sys.path.append('bksys')


boson_modules = ''
boson_modules += ' generic'
boson_modules += ' lowlevel'
boson_modules += ' kde3'
boson_modules += ' boson_help_separator'
boson_modules += ' boson_prefix'
boson_modules += ' boson_misc'
boson_modules += ' libxrandr'
boson_modules += ' libufo'
boson_modules += ' python'
boson_modules += ' openal'
boson_modules += ' boson_openal'
boson_modules += ' boson_static'
boson_modules += ' boson_boui'
boson_modules += ' boson_plugins'
boson_modules += ' boson_bomemory'
boson_modules += ' boson'
boson_modules += ' boson_static_libs'

## Import the main configuration tool
from generic import configure
config = {
	'modules'  : boson_modules,
	'builddir' : 'build', # put all object files under 'build/'
	'config.h' : 1, # mechanism should be ok
	'rpath'    : 1, # incomplete
	'bootstrap': 1, # incomplete
}
#	'colorful' : not os.environ.has_key('NOCOLORS'), # only with scons >= 0.96.91 - now miniscons

# and the config.h
env=configure(config)

# now the kdemacros (TODO put this into a bootstrap section somehow ?
#dest = open(env.join('build','kdemacros.h'), 'w')
#dest.write('#include <kdemacros.h.in>\n')
#dest.close()

import os
try:
	os.mkdir('build'+os.sep+'kjs')
except OSError:
	pass

dest = open(env.join('build','kjs','global.h'), 'w')
dest.write('#include "global.h.in"\n')
dest.close()


# AB: the next line is _REQUIRED_ for boson!
#     -> we must make sure g++ picks our copy, not the one from libkdegames. for
#        this we need both, -I. (for #include <kgame/foobar.h>) and -Ikgame (for
#        #include <foobar.h>)
# TODO: this should actually be in CPPPATH instead so that scons will
# automatically find dependencies and rebuild if necessary. however bksys has
# the kde includes in CXXFLAGS and these appear in the command line before the
# includes...
env.PrependUnique(CXXFLAGS = ['-Ikgame', '-I.'])


# AB:
# remove this warning (enabled by -Wall), as we use Qt3, which gcc 4 does not
# like.
env.AppendUnique(CXXFLAGS = ['-Wno-non-virtual-dtor'])

# AB:
# we have lots of things like
#   program1 = env.kobject('program')
#   program2 = env.kobject('program')
#   program1.source += "source.cpp"
#   program2.source += "source.cpp"
# -> SCons does not like these, as two different kobject instances provide two
#    different environments and one source should be in one environment only.
#
#    however this issue is not a problem, as the environments use the same flags
#    (at least currently) and therefore build the source the same way.
#    SCons therefore emits a warnings, but that is harmless.
#    -> we don't want a zillion warnings (one per .cpp file), so we suppress it.
#
#    a nicer solution would be to somehow merge the environments for the source
#    files...
import SCons.Warnings
SCons.Warnings.suppressWarningClass(SCons.Warnings.DuplicateEnvironmentWarning)


###################################################################
# SCRIPTS FOR BUILDING THE TARGETS
###################################################################

subdirs = ''
if env['LIB_BOMEMORY']:
	subdirs += 'bomemory'
subdirs += """
	math
	bobmfconverter
	bodebug
	bogl
	kgame
	bosound
	ufo
	boson
	server
"""

# TODO: libboson_libs: Xrandr only if present
# TODO: ground/mesh renderer / gameviewplugin: static/dynamic !
# TODO: bofullscreen.cpp: HAVE_XFREE86_XRANDR


if env['WINDOWS']:
	subdirs = "win\n" + subdirs



# TODO this will not stay like this ..
dirs=[] # the dirs to process are appended to this var in the loop below
for dir in subdirs.split():
	jdir =  env.join('#build', dir)
	try:
		os.mkdir(jdir[1:])
	except OSError:
		pass
	env.BuildDir( jdir, dir, duplicate=0)
	dirs.append( jdir )
env.subdirs(dirs)

###################################################################
# CONVENIENCE FUNCTIONS TO EMULATE 'make dist' and 'make distclean'
###################################################################

# if you forget to add a version number, the one in the file VERSION will be used instead
#env.dist('kdelibs', '4.0.0')

