dnl TODO: we need to find out which version is installed and which we need
AC_DEFUN([AC_CHECK_LIB3DS],
[
AC_MSG_CHECKING([for lib3ds/file.h])
AC_FIND_FILE(lib3ds/file.h,  [$kde_incdirs], lib3ds)
if test "$lib3ds" = NO ; then
  AC_MSG_RESULT([no])
  AC_MSG_ERROR([lib3ds was not found. See http://lib3ds.sourceforge.net])
else
  AC_MSG_RESULT([$lib3ds])
fi
])
AC_CHECK_LIB3DS

AC_DEFUN([AC_BOSON_HAVE_GL_HEADERS],
[
dnl first search for GL/gl.h and GL/glu.h
 bo_have_gl=""
 AC_CHECK_HEADERS(GL/gl.h,
	bo_have_gl="yes",
	bo_have_gl="no"
 )
 if test "x$bo_have_gl" != "xyes"; then
	AC_MSG_ERROR([The file GL/gl.h could not be found. Please install the development package of your graphics card driver!])
 fi

 bo_have_glu=""
 AC_CHECK_HEADERS(GL/glu.h,
	bo_have_glu="yes",
	bo_have_glu="no"
 )
 if test "x$bo_have_glu" != "xyes"; then
	AC_MSG_ERROR([The file GL/glu.h could not be found. Please install the GLU development package (e.g. mesa-glu-devel). Note that this is NOT part of the graphics card drivers! E.g. NVidia does NOT ship GLU!])
 fi

dnl also check for glext.h
dnl note that this one isn't strictly neccessary, some implementations put
dnl  everything into gl.h
dnl AB: we can't use AC_CHECK_HEADERS here, as glext.h may depend on gl.h
dnl     without including it itself
 bo_have_glext=""
 AC_MSG_CHECKING(for GL/glext.h)
 AC_TRY_COMPILE([
#include <GL/gl.h>
#include <GL/glext.h>
	],
	[],
	bo_have_glext="yes",
	bo_have_glext="no"
 )
 if test "$bo_have_glext" != "yes"; then
	AC_DEFINE_UNQUOTED(HAVE_GL_GLEXT_H, 0, [Define to 1 if you have the <GL/glext.h> header file.])
	AC_MSG_RESULT([no])
 else
	AC_DEFINE_UNQUOTED(HAVE_GL_GLEXT_H, 1, [Define to 1 if you have the <GL/glext.h> header file.])
	AC_MSG_RESULT([yes])
 fi
])
AC_BOSON_HAVE_GL_HEADERS

AC_DEFUN([AC_BOSON_HAVE_GL_LIBS],
[
 AC_LANG_SAVE
 AC_LANG_CPLUSPLUS
 bo_save_ldflags="$LDFLAGS"
 bo_save_cxxflags="$CXXFLAGS"

 bo_have_gl=""
 AC_MSG_CHECKING(for libGL)
 LDFLAGS="$LDFLAGS $GL_LDFLAGS $X_LDFLAGS $all_libraries -lGL -lX11"
 LDFLAGS="$LDFLAGS $LIB_XEXT -lm $LIBSOCKET"
 CXXFLAGS="$CFLAGS $X_INCLUDES"
 test -n "$GL_INCLUDE" && CFLAGS="-I$GL_INCLUDE $CFLAGS"

 AC_TRY_LINK(
	[
#include <GL/gl.h>
	], [
#ifndef GL_VERSION_1_2
#error GL_VERSION_1_2 is not defined! OpenGL 1.2 is required!
#endif
glBegin(GL_TRIANGLES);
glEnd();
	],
	[bo_have_gl=yes],
	[bo_have_gl=no]
 )
 if test "x$bo_have_gl" != "xyes"; then
	AC_MSG_RESULT([no])
	AC_MSG_ERROR([configure was unable to link to libGL. Please install OpenGL (i.e. the 3d driver of your graphics card])
 fi
 AC_MSG_RESULT([yes])

 bo_have_glu=""
 AC_MSG_CHECKING(for libGLU)
 LDFLAGS="$LDFLAGS -lGLU"
 AC_TRY_LINK(
	[
#include <GL/gl.h>
#include <GL/glu.h>
	], [
gluLookAt(0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 100.0, 0.0);
],
	[bo_have_glu=yes],
	[bo_have_glu=no]
 )
 if test "x$bo_have_glu" != "xyes"; then
	AC_MSG_RESULT([no])
	AC_MSG_ERROR([configure was unable to link to libGLU. Please install GLU (e.g.  mesa-glu). Note this is NOT included in your graphics card driver!])
 else
	AC_MSG_RESULT([yes])
 fi

 dnl AB: the AC_DEFINE is pretty useless, as we abort anyway, if GL not there
 AC_DEFINE(HAVE_GL, 1, [Defines if you have GL (Mesa, OpenGL, ...)])
 if test "$GL_LDFLAGS" = ""; then
	GLLIB='-lXmu -lGLU -lGL $(LIB_X11)'
 else
	GLLIB="$GL_LDFLAGS -Xmu -lGLU -lGL "'$(LIB_X11)'
 fi
 if test "$GL_INCLUDE" = ""; then
	GLINC=""
 else
	GLINC="-I$GL_INCLUDE"
 fi

 AC_LANG_RESTORE
 LDFLAGS="$bo_save_ldflags"
 CXXFLAGS="$bo_save_cxxflags"

 AC_SUBST(GLLIB)
 AC_SUBST(GLINC)
])
AC_BOSON_HAVE_GL_LIBS


AC_DEFUN([AC_BOSON_PREFIX],
[
  AC_DEFINE_UNQUOTED(BOSON_PREFIX, "$prefix", [ ])
])
AC_BOSON_PREFIX

AC_DEFUN([AC_BOSON_STATIC],
[
  if test "x$enable_static" = "xyes"; then
      AC_DEFINE_UNQUOTED(BOSON_COMPILE_STATIC, 1, [ ])
  else
    AC_DEFINE_UNQUOTED(BOSON_COMPILE_STATIC, 0, [ ])
  fi
])
AC_BOSON_STATIC


AC_DEFUN([AC_BOSON_CHECK_VIDMODE],
[
  AC_LANG_SAVE
  AC_LANG_C
  bo_vidmode_extension="no"
  bo_save_ldflags="$LDFLAGS"
  bo_save_cflags="$CFLAGS"
  bo_save_libs="$LIBS"
  bo_lib_vidmode="-lXext -lXxf86vm"
  AC_MSG_CHECKING(for XFree86 VidMode extension)
  LDFLAGS="$LDFLAGS $X_LDFLAGS"
  CFLAGS="$CFLAGS $X_INCLUDES"
  LIBS="$LIBS -lX11 $bo_lib_vidmode"

  AC_TRY_LINK(
	[
#include <X11/Xlib.h>
#include <X11/extensions/xf86vmode.h>
	],[
Display* dpy = 0;
int ev, er;
XF86VidModeQueryExtension(dpy, &ev, &er);
	],
	[bo_vidmode_extension=yes],
	[bo_vidmode_extension=no]
  )

  if test "x$bo_vidmode_extension" = "xyes"; then
    AC_MSG_RESULT([yes])
    AC_DEFINE_UNQUOTED(HAVE_XFREE86_VIDMODE, 1, [ Defines if you have the XFree86 VidMode extension ])
    LIB_VIDMODE="$bo_lib_vidmode"
  else
    AC_MSG_RESULT([no])
    LIB_VIDMODE=""
  fi

  AC_LANG_RESTORE
  LDFLAGS="$bo_save_ldflags"
  CFLAGS="$bo_save_cflags"
  LIBS="$bo_save_libs"
  AC_SUBST(LIB_VIDMODE)
])

AC_DEFUN([AC_BOSON_CHECK_XRANDR],
[
  AC_LANG_SAVE
  AC_LANG_C
  bo_xrandr_extension="no"
  bo_save_ldflags="$LDFLAGS"
  bo_save_cflags="$CFLAGS"
  bo_save_libs="$LIBS"
  dnl AB: -lXrender is required on some systems :-(
  dnl TODO: find a way to link to it only on those systems
  bo_lib_xrandr="-lXext -lXrender -lXrandr"
  AC_MSG_CHECKING(for XFree86 Xrandr extension)
  LDFLAGS="$LDFLAGS $X_LDFLAGS"
  CFLAGS="$CFLAGS $X_INCLUDES"
  LIBS="$LIBS -lX11 $bo_lib_xrandr"

  AC_TRY_LINK(
	[
#include <X11/Xlib.h>
#include <X11/extensions/Xrandr.h>
	],[
Display* dpy = 0;
int ev, er;
int count;

XRRScreenConfiguration* conf = 0; /* NULL invalid, but who cares here */

XRRQueryExtension(dpy, &ev, &er);

/* this line fails for XFree86 4.2 */
XRRConfigSizes(conf, &count);
	],
	[bo_xrandr_extension=yes],
	[bo_xrandr_extension=no]
  )

  if test "x$bo_xrandr_extension" = "xyes"; then
    AC_MSG_RESULT([yes])
    AC_DEFINE_UNQUOTED(HAVE_XFREE86_XRANDR, 1, [ Defines if you have the XFree86 Xrandr extension ])
    LIB_XRANDR="$bo_lib_xrandr"
  else
    AC_MSG_RESULT([no])
    LIB_XRANDR=""
  fi

  AC_LANG_RESTORE
  LDFLAGS="$bo_save_ldflags"
  CFLAGS="$bo_save_cflags"
  LIBS="$bo_save_libs"
  AC_SUBST(LIB_XRANDR)
])
AC_BOSON_CHECK_XRANDR

AC_DEFUN([AC_CHECK_PLIB_HEADERS],
[
  dnl We require at least 1.8.2 - note that previous version will never be
  dnl supported, as I don't want _any_ dependency on glut (due to licensing
  dnl reasons)
  AC_MSG_CHECKING([for plib headers])
  AC_LANG_SAVE
  AC_LANG_CPLUSPLUS
  AC_TRY_COMPILE([
#include <plib/ul.h>
	],
	[],
	bo_have_plib="yes",
	bo_have_plib="no"
  )
  if test "x$bo_have_plib" != "xyes" ; then
	AC_MSG_RESULT([no])
	AC_MSG_ERROR([plib/ul.h was not found. Install the plib development files - see http://plib.sf.net])
  fi
  AC_TRY_COMPILE([
#include <plib/ul.h>
	],
	[
#if PLIB_VERSION < (1*100 + 8*10 + 2)
#error Installed plib version too old. Require at least 1.8.2
#endif
	],
	bo_have_plib="yes",
	bo_have_plib="no"
  )

  if test "x$bo_have_plib" != "xyes" ; then
	AC_MSG_RESULT([no])
	AC_MSG_ERROR([plib version too old. Install more recent plib development files - see http://plib.sf.net])
  else
	AC_MSG_RESULT([$bo_have_plib])
  fi
  AC_LANG_RESTORE
])
AC_CHECK_PLIB_HEADERS

AC_DEFUN([AC_CHECK_PLIB_LIBS],
[
  AC_MSG_CHECKING([for plib libraries])
  AC_LANG_SAVE
  AC_LANG_CPLUSPLUS
  bo_save_ldflags="$LDFLAGS"
  bo_save_cxxflags="$CXXFLAGS"
  LIB_PLIB="-lplibul -lplibpu -lplibfnt -lplibpuaux -lplibsg"
  LDFLAGS="$LDFLAGS $LIB_PLIB -lGL"
  CXXFLAGS="$CFLAGS $X_INCLUDES"
  bo_have_plib=""
  AC_TRY_LINK(
	[
#include <plib/ul.h>
	], [
ulClock c;
	],
	[bo_have_plib="yes"],
	[bo_have_plib="no"]
  )
  if test "x$bo_have_plib" != "xyes" ; then
	AC_MSG_RESULT([no])
	AC_MSG_ERROR([linking to plib libraries failed. Install the plib libraries - see http://plib.sf.net])
  else
	AC_MSG_RESULT([$bo_have_plib])
  fi
  AC_LANG_RESTORE
  LDFLAGS="$bo_save_ldflags"
  CXXFLAGS="$bo_save_cxxflags"
  AC_SUBST(LIB_PLIB)
])
AC_CHECK_PLIB_LIBS

