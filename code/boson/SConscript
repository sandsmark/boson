Import('env')

lib_meshrendererplugin = ''
lib_groundrendererplugin = ''
lib_gameviewplugin = ''
if env['BOSON_USE_PLUGINS']:
	env.KDEaddflags_link('-Xlinker --export-dynamic')
else:
	lib_meshrendererplugin = ' meshrenderer/libbomeshrendererplugin_static.a '
	lib_groundrendererplugin = ' groundrenderer/libbogroundrendererplugin_static.a '
	lib_gameviewplugin = ' gameview/plugin/libbosongameviewplugin_static.a '

#if env['BOSON_DO_STATIC']:
#	env.KDEaddflags_link('-static')

#env.PrependUnique(CPPPATH = ['../kgame'])
#env.PrependUnique(CPPPATH = ['../ufo'])

env.subdirs(['data', 'script', 'info', 'gameview/plugin', 'boufo', 'meshrenderer', 'groundrenderer'])

libcommon = env.kobject('staticlib')
libcommon.target = 'libcommon'
libcommon.includes = '../bodebug ../bogl'
libcommon.source = """
	boapplication.cpp
	boglobal.cpp
	bosonconfig.cpp
	bosondata.cpp
	bomath.cpp
	bo3dtools.cpp
	bosonprofiling.cpp
	bopluginmanager.cpp
"""
libcommon.execute()

libcommon_libpaths = ' '.join(env['LIBPATH_X11'])
libcommon_libs = """
	../bodebug/libbodebug.a
	../bogl/libbogl.a
	../math/libbomath.a
	./libimageio.a
"""

libcommon_libs_objects = []
libcommon_libs_objects += env.createDummyLibs('../bodebug/libbodebug.a ../bogl/libbogl.a ../math/libbomath.a ./libimageio.a')


libgameengine_libs = """
	./script/libbosonscript.a
""" + env['LIB_PYTHON'] + """
	../kgame/libkgame.a
"""

libgameengine_libs_objects = []
libgameengine_libs_objects += env.createDummyLibs('./script/libbosonscript.a')
libgameengine_libs_objects += env.createDummyLibs(env['LIB_PYTHON'], env['BOSON_DO_STATIC'])
libgameengine_libs_objects += env.createDummyLibs('../kgame/libkgame.a')



libimageio = env.kobject('staticlib')
libimageio.target = 'libimageio'
#libimageio.includes = '../bodebug ../bogl'
libimageio.source = """
	imageio/boimageio.cpp
	imageio/tga.cpp
	imageio/pcx.cpp
"""
libimageio.execute()


libgameengine = env.kobject('staticlib')
libgameengine.target = 'libgameengine'
libgameengine.includes = '../bodebug ../bogl ../boson/boufo'
libgameengine.includes += ' items/' # for .moc files
libgameengine.source = """
	boeventloop.cpp
	boupgradeableproperty.cpp
	unitbase.cpp
	unit.cpp
	unitproperties.cpp
	pluginproperties.cpp
	unitplugins.cpp
	upgradeproperties.cpp
	bosonweapon.cpp
	boitemlist.cpp
	boitemlisthandler.cpp
	bosonplayfield.cpp
	bosonmap.cpp
	cell.cpp
	bofile.cpp
	bpfdescription.cpp
	bosonfileconverter.cpp
	bosoncampaign.cpp
	bosonmessage.cpp
	boson.cpp
	bomessage.cpp
	bosoncanvas.cpp
	bosoncanvasstatistics.cpp
	bosoncollisions.cpp
	bosonnetworksynchronizer.cpp
	bosonnetworktraffic.cpp
	speciestheme.cpp
	player.cpp
	playerio.cpp
	bosoncomputerio.cpp
	bosonpath.cpp
	bosonstatistics.cpp 
	bogameproperty.cpp
	bosonpropertyxml.cpp
	bosonplayerinputhandler.cpp
	bobincoder.cpp
	boevent.cpp
	boeventmatching.cpp
	boeventlistener.cpp
	boeventmanager.cpp
	bocondition.cpp
	bowater.cpp
	bosonsaveload.cpp
	bosongroundtheme.cpp
	bosongameengine.cpp
	bosonstarting.cpp
	bosongameenginestarting.cpp
	boquadtreenode.cpp
	items/bosonitem.cpp
	items/bosonshot.cpp
	items/bosonitempropertyhandler.cpp
"""
libgameengine.execute()


startupwidgets_sources = """
	startupwidgets/boufocolorchooser.cpp
	startupwidgets/bosonstartupnetwork.cpp
	startupwidgets/welcomewidget.boui
	startupwidgets/newgamewidget.boui
	startupwidgets/boufonewgamewidget.cpp
	startupwidgets/boufostartupwidget.cpp
	startupwidgets/boufoloadingwidget.cpp
	startupwidgets/boufonetworkoptionswidgetbase.boui
	startupwidgets/boufonetworkoptionswidget.cpp
	startupwidgets/boufostarteditorwidgetbase.boui
	startupwidgets/boufostarteditorwidget.cpp
	startupwidgets/boufoloadsavegamewidget.cpp
	startupwidgets/bocreatenewmap.cpp
"""
#startupwidgets_sources = """
#	startupwidgets/welcomewidget.boui
#"""

commandframe_sources = """
	commandframe/bosoncommandframe.cpp
	commandframe/bosonorderwidget.cpp
	commandframe/bosonorderbutton.cpp
	commandframe/boactionswidget.cpp
	commandframe/bosonunitview.cpp
	commandframe/editorunitconfigwidget.cpp
	commandframe/bocommandframeeventlistener.cpp
"""

gameview_sources = """
	items/bosonitemrenderer.cpp
	gameview/bosonufogameguihelper.boui
	gameview/bosonufogamegui.cpp
	gameview/bosonufocanvaswidget.cpp
	gameview/bosonufogamewidgets.cpp
	gameview/bosongameview.cpp
	gameview/bosongamevieweventlistener.cpp
	gameview/bosoncanvasrenderer.cpp
	gameview/bosongameviewinputbase.cpp
	gameview/bosongameviewinput.cpp
	gameview/editorviewinput.cpp
	gameview/bosonlocalplayerinput.cpp
	gameview/bolocalplayereventlistener.cpp
	gameview/bosonmenuinput.cpp
	gameview/boeditplayerinputswidget.cpp
"""


boufo_lib = """
	./boufo/libboufo.a
	../ufo/src/libufo.a
"""


libboson_source = """
	bosonviewdata.cpp
	boselection.cpp
	botooltipcreator.cpp
	bosonglwidget.cpp
	bosonufoglwidget.cpp
	bomousemovediff.cpp
	bomatrixwidget.cpp
	bocamerawidget.cpp
	boorbiterwidget.cpp
	bosonufochat.cpp
	bosonprofilingdialog.cpp
	bpfdescriptiondialog.cpp
	boglstatewidget.cpp
	bodebuglogdialog.cpp
	bofullscreen.cpp
	bocamera.cpp
	boautocamera.cpp
	bosoncursor.cpp
	bosonmodel.cpp
	bosonmodeltextures.cpp
	bomesh.cpp
	bomeshrenderer.cpp
	bomeshrenderermanager.cpp
	bomaterial.cpp
	bolight.cpp
	botexture.cpp
	bobmfload.cpp
	boshader.cpp
	speciesdata.cpp
	boaction.cpp
	bosongroundthemedata.cpp
	borendertarget.cpp
	bosonwidgets/bonuminput.cpp
	sound/bosonaudiointerface.cpp
"""
libboson_includes = '../bodebug ../bogl ../boson/boufo ../bosound'
libboson_includes += ' bosonwidgets ' # for .moc files

libboson_libs = lib_meshrendererplugin
libboson_libs += ' ./info/libbosoninfo.a '
libboson_libs += ' '.join(env['LIB_BOSOUND'])
libboson_libs += ' ./libgameengine.a'
libboson_libs += libgameengine_libs
libboson_libs += ' ./libcommon.a'
libboson_libs += libcommon_libs
libboson_libs += ' kio'
libboson_libs += ' 3ds'
libboson_libs += ' ' + env['LIB_XRANDR']

libboson_libs_objects = []
libboson_libs_objects += env.createDummyLibs([lib_meshrendererplugin, './info/libbosoninfo.a', './libgameengine.a', './libcommon.a'])
libboson_libs_objects += env.createDummyLibs(env['LIB_BOSOUND'], env['BOSON_DO_STATIC'])

if env['BOSON_DO_STATIC']:
       # OpenAL dependencies

       # FIXME: this is very system dependent !

       libboson_libs_objects += env.createDummyLibs('vorbisfile vorbis ogg asound', env['BOSON_DO_STATIC'])
#      libboson_libs_objects += env.createDummyLibs('artsc vorbisfile vorbis ogg asound', env['BOSON_DO_STATIC'])

libboson_libs_objects += libgameengine_libs_objects
libboson_libs_objects += libcommon_libs_objects

libboson_libs_objects += env.createDummyLibs('3ds', env['BOSON_DO_STATIC'])
libboson_libs_objects += env.createDummyLibs('kio kdesu', env['BOSON_DO_STATIC'])
libboson_libs_objects += env.createDummyLibs('kdeui', env['BOSON_DO_STATIC'])
libboson_libs_objects += env.createDummyLibs('kdecore', env['BOSON_DO_STATIC'])
libboson_libs_objects += env.createDummyLibs(env['LIB_XRANDR'], env['BOSON_DO_STATIC'])

libboson_libs_objects += env['LIB_KDECORE_DEPENDENCIES_OBJECTS']

if env['BOSON_DO_STATIC']:
       # for python
       libboson_libs_objects += env.createDummyLibs('util', env['BOSON_DO_STATIC'])





boson = env.boobject('program')
boson.target = 'boson'
boson.includes = '../bodebug ../bogl ../boson/boufo'
boson.includes += ' commandframe/ gameview/ startupwidgets/ ' # for .moc files
boson.includes += libboson_includes
boson.libs = ''
boson.boAddLibs(lib_groundrendererplugin)
boson.boAddLibs(lib_gameviewplugin)
boson.boAddLibs(boufo_lib)

boson.libpaths += libcommon_libpaths
if env['BOSON_DO_STATIC']:
	# FIXME
	boson.libpaths += ' /home/andi/kde/boson/static/openal/linux/src'

boson.source += libboson_source
boson.source += """
	bosonfpscounter.cpp
	bosonmainwidget.cpp
	bosonmainwidgetmenuinput.cpp
	boufoactionext.cpp
	bogltooltip.cpp
	bosonglminimap.cpp
	bosonufominimap.cpp
	optionsdialog.cpp
	optionswidgets.cpp
	bogroundrenderer.cpp
	bogroundrenderermanager.cpp
	kgameunitdebug.cpp
	kgameadvancemessagesdebug.cpp
	kgameplayerdebug.cpp
	kgamecelldebug.cpp
	gameoverdialog.cpp
	bocheckinstallation.cpp
	bosonguistarting.cpp
	bosongameviewpluginbase.cpp
	bosongameviewpluginmanager.cpp
	bosoneffectmanager.cpp
	bosoneffect.cpp
	bosoneffectproperties.cpp
	bosoneffectparticle.cpp
	bosoneffectpropertiesparticle.cpp 
	botexmapimportdialog.cpp
	boconditionwidget.cpp
	bowaterrenderer.cpp
	selectbox.cpp
	main.cpp
"""
boson.source += startupwidgets_sources
boson.source += commandframe_sources
boson.source += gameview_sources

boson.boAddLibObjects(libboson_libs_objects)
boson.libs = ''

boson.execute()


bosonNoGUI = env.kobject('program')
bosonNoGUI.target = 'boson-no-gui'
bosonNoGUI.includes = '../bodebug'
bosonNoGUI.includes += libboson_includes
bosonNoGUI.libs = ' libgameengine.a'
bosonNoGUI.libs += boufo_lib
bosonNoGUI.libs += ' libcommon.a'
bosonNoGUI.libs += libgameengine_libs
bosonNoGUI.libs += libcommon_libs
bosonNoGUI.libs += ' kio kdecore qt-mt'
bosonNoGUI.libpaths += libcommon_libpaths
bosonNoGUI.source += """
	bosoncomputerio.cpp
	bocheckinstallation.cpp
	mainnogui.cpp
"""


bosonNoGUI.execute()




bounit = env.kobject('program')
bounit.target = 'bounit'
bounit.includes = '../bodebug ../bogl ../boson/boufo'
bounit.libpaths += libcommon_libpaths
bounit.libs = """
	libgameengine.a
	libcommon.a
	./info/libbosoninfo.a
""" + libgameengine_libs + libcommon_libs
bounit.libs += ' kio kdeui kdecore qt-mt Xmu'
bounit.libs += ' ' + env['LIB_XRANDR']
bounit.source = """
	bounitmain.cpp
	bosonsearchpathswidgetbase.ui
	bosonsearchpathswidget.cpp
	bouniteditorbase.ui
	bouniteditor.cpp
"""
bounit.execute()


bocursor = env.kobject('program')
bocursor.target = 'bocursor'
bocursor.includes = '../bodebug ../bogl ../boson/boufo'
bocursor.libpaths += libcommon_libpaths
bocursor.libs = './info/libbosoninfo.a'
bocursor.libs += ' ./libcommon.a' + libcommon_libs
bocursor.libs += 'kio kdeui qt-mt Xmu'
bocursor.source = """
	bosoncursor.cpp
	botexture.cpp
	bosonglwidget.cpp

	bocursormain.cpp
	bosoncursoreditor.cpp
"""
bocursor.execute()

borender = env.kobject('program')
borender.target = 'borender'
borender.includes = '../bodebug ../bogl ../boson/boufo'
borender.includes += libboson_includes
borender.libs = libboson_libs + """
	3ds
"""
borender.libs += boufo_lib
borender.libs += " Xmu"
borender.libpaths += libcommon_libpaths
borender.source = libboson_source
borender.source += """
	kgamemodeldebug.cpp
	bomaterialwidget.cpp
	bovectorinput.cpp
	kgamespeciesdebug.cpp
	borendermain.cpp
	borendergui.boui
	borenderrendermodel.cpp
	bopixmaprenderer.cpp
	boeditturretpropertiesdialog.cpp
"""
borender.execute()

boinfo = env.boobject('program')
boinfo.target = 'boinfo'
boinfo.includes = '../bodebug ../bogl ../boson/boufo'
boinfo.libpaths += libcommon_libpaths
boinfo.source = """
	bosonglwidget.cpp
	boinfomain.cpp
"""
boinfo.libs = ''
boinfo.boAddLibs('./info/libbosoninfo.a')
boinfo.boAddLibs('libcommon.a')
boinfo.boAddLibObjects(libcommon_libs_objects)
boinfo.boAddLibObjects(env.createDummyLibs('kio kdesu kdeui kdecore', env['BOSON_DO_STATIC']))
boinfo.boAddLibObjects(env['LIB_KDECORE_DEPENDENCIES_OBJECTS'])
boinfo.execute()

bo3dsdebug = env.kobject('program')
bo3dsdebug.target = 'bo3dsdebug'
bo3dsdebug.includes = '../bodebug ../bogl ../boson/boufo'
bo3dsdebug.libpaths += libcommon_libpaths
bo3dsdebug.libs = 'libcommon.a ' + libcommon_libs
bo3dsdebug.libs += boufo_lib
bo3dsdebug.libs += ' 3ds'
bo3dsdebug.libs += ' kio'
bo3dsdebug.source = """
	kgamemodeldebug.cpp
	bomatrixwidget.cpp

	bo3dsdebugmain.cpp
"""
bo3dsdebug.execute()

boconditioneditor = env.kobject('program')
boconditioneditor.target = 'boconditioneditor'
boconditioneditor.includes = '../bodebug ../bogl ../boson/boufo'
boconditioneditor.libpaths += libcommon_libpaths
boconditioneditor.libs = './libgameengine.a ' + libgameengine_libs
boconditioneditor.libs += './libcommon.a ' + libcommon_libs
boconditioneditor.libs += ' ' + env['LIB_XRANDR']
boconditioneditor.libs += ' kio kdeui qt-mt Xmu'
boconditioneditor.source = """
	boconditionwidget.cpp
	boconditioneditormain.cpp
"""
boconditioneditor.execute()


boprofiling = env.kobject('program')
boprofiling.target = 'boprofiling'
boprofiling.includes = '../bodebug ../bogl ../boson/boufo'
boprofiling.libpaths += libcommon_libpaths
boprofiling.libs = 'libcommon.a ' + libcommon_libs
boprofiling.libs += ' kio kdeui qt-mt Xmu'
# TODO: only if present
boprofiling.libs += ' ' + env['LIB_XRANDR']
boprofiling.source = """
	bosonprofilingdialog.cpp
	boprofilingmain.cpp
"""
boprofiling.execute()



